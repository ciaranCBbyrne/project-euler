/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

import java.util.ArrayList;


public class problem12 {

	ArrayList<Integer> triHold = new ArrayList<Integer>();			//array to hold triangle numbers as they are found
	ArrayList<Integer> divisors = new ArrayList<Integer>();			//array with corresponding number of divisors to triHold
	
	public problem12(){		
		long time = System.currentTimeMillis();
		
		//add some elements to arrays to begin with
		makeArray();
		
		//declare variables: triangle is triangular number ; adder will increment by 1 each time
		int triangle = 0;
		int adder = 0;
		boolean found = false;
		
		while(!found){
			
			int counter = 0;			//counts amount of divisors
			adder++;					
			triangle += adder;			
			int start = 1;				//gives a starting point to begin dividing into triangle.
			
			if(triangle >= triHold.size()){
				for(int i = triHold.size()-1 ; i >= 0 ; i--){		
											/*if triangle can be divided evenly by any other triangular number previously found,
											then we will use that number's amount of divisors, and start comparing from this
											triangular number upwards to save amount of comparisons
											*/	
					if(triangle % triHold.get(i) == 0){		//gets highest number in array that divides evenly into triangle
						counter = divisors.get(i);		  	  //makes counter the value corresponding to triangle
						start = triHold.get(i) + 1;			    //start of comparisons loop will be triangle from array +1
					}
					break;				                        //stop loop once highest triangle found
				}
			}
			
			for(int j = start ; j*j <= triangle ; j++){		//loop to count divisors
				if(triangle % j == 0){
					counter += 2;				          //if divisor found increment by 2 as we are using j*j in for loop for speed
				}
			}
			if(triangle > 10){					  //add results to arrays
				triHold.add(triangle);
				divisors.add(counter);
			}
			if(counter >= 500){					  //when we reach 500 hundred or more divisors print and stop
				System.out.println(triangle);
				found = true;
			}
		}
		System.out.println(System.currentTimeMillis() - time + " milliseconds");
	}
	
	public void makeArray(){
									      /*method to add numbers from 1 to 10 to start of triHold and 
									      the amount of divisors of each to divisors array
									      */
		triHold.add(1);
		divisors.add(1);
		
		for(int x = 2 ; x <= 10 ; x++){
			triHold.add(x);
			int div = 0;
			for(int y = 1 ; y <= x ; y++){
				if(x % y == 0){
					div++;
				}
			}
			divisors.add(div);			
		}
	}

	public static void main(String[]args){
		new problem12();
	
	}	
}
